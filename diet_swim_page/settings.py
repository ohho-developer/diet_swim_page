"""
Django settings for diet_swim_page project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os
import firebase_admin
from firebase_admin import credentials
import base64
import json


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environ
env = environ.Env()
env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])
CSRF_TRUSTED_ORIGINS = ['https://port-0-diet-swim-page-mbvo57g1a476113a.sel4.cloudtype.app','https://bloomingswim.designusplus.com']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party apps
    'rest_framework',
    ## local apps
    'bootstrap4',
    'main',
    'accounts',
    'wellness_checkin',
    'notification',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'diet_swim_page.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'diet_swim_page.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
            'OPTIONS': {
                'options': '-c search_path=schema_b'
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

if DEBUG:
    # 개발환경 설정
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    # 배포환경 설정
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email settings
EMAIL_HOST = env.str("EMAIL_HOST", default=None)
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", default=None)
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", default=None)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", default=EMAIL_HOST_USER)


SESSION_COOKIE_AGE = 1209600  # 2주
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 브라우저 닫아도 유지
SESSION_SAVE_EVERY_REQUEST = True  # 활동할 때마다 세션 연장



# Firebase Admin SDK 초기화 설정
# 1. 환경 변수에서 Base64 문자열로 서비스 계정 키 내용을 가져옵니다.
FIREBASE_SERVICE_ACCOUNT_B64 = os.environ.get('FIREBASE_SERVICE_ACCOUNT_KEY')

# 2. 초기화 로직 (환경 변수 우선)
if not firebase_admin._apps: # 이미 초기화된 앱이 없는 경우에만 시도
    # 환경 변수가 설정되어 있다면 환경 변수 사용
    if FIREBASE_SERVICE_ACCOUNT_B64:
        try:
            service_account_info_json = base64.b64decode(FIREBASE_SERVICE_ACCOUNT_B64).decode('utf-8')
            service_account_info = json.loads(service_account_info_json)
            
            cred = credentials.Certificate(service_account_info)
            
            # project_id를 명시적으로 가져와 초기화에 전달
            project_id = service_account_info.get('project_id')
            if not project_id:
                raise ValueError("Project ID not found in Firebase credentials JSON.")

            firebase_admin.initialize_app(cred, {'projectId': project_id})
            print(f"Firebase Admin SDK initialized successfully from environment variable for project ID: {project_id}!")
        except Exception as e:
            # 환경 변수를 통한 초기화 실패 시 심각한 오류로 처리 (배포 시 중요)
            print(f"CRITICAL ERROR: Failed to initialize Firebase Admin SDK from environment variable: {e}")
            raise # 이 줄은 배포 환경에서 초기화 실패 시 서버가 시작되지 않도록 합니다.

    # 환경 변수가 없고 DEBUG 모드일 경우 파일 사용 (로컬 개발용)
    elif DEBUG:
        FIREBASE_CREDENTIALS_PATH = os.path.join(BASE_DIR, 'blooming-swim-firebase-adminsdk-fbsvc-804f65cee1.json')
        if os.path.exists(FIREBASE_CREDENTIALS_PATH):
            try:
                cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
                
                # 파일에서 project_id를 직접 가져와 명시적으로 전달
                with open(FIREBASE_CREDENTIALS_PATH, 'r') as f:
                    file_sa_info = json.load(f)
                    file_project_id = file_sa_info.get('project_id')
                    if not file_project_id:
                        raise ValueError("Project ID not found in Firebase credentials file.")

                firebase_admin.initialize_app(cred, {'projectId': file_project_id})
                print(f"Firebase Admin SDK initialized successfully from file (dev mode) for project ID: {file_project_id}!")
            except Exception as e:
                print(f"CRITICAL ERROR: Failed to initialize Firebase Admin SDK from file (dev mode): {e}")
                # raise # 개발 중에는 raise 대신 경고만 주고 넘어가도 됩니다.
        else:
            print("WARNING: Firebase credentials file not found for local development. Firebase Admin SDK not initialized.")
    else: # 환경 변수도 없고 DEBUG도 False일 때 (프로덕션 환경에서 발생 시 문제)
        print("CRITICAL ERROR: Firebase Admin SDK could not be initialized. Neither environment variable nor local file found.")
        raise # 배포 환경에서는 이 상황을 허용하지 않음